#!/usr/bin/env node

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

// Resolve __dirname for ESM
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Source and destination paths
const srcDir = path.resolve(__dirname, '..'); // /interview-questions
const destFile = path.join(__dirname, 'interview-questions.md');

// Preferred section order
const preferredOrder = [
  'React',
  'JavaScript',
  'NodeJS',
  'Network and Security',
  'HTML/CSS',
  'Operation System',
  'General',
  'Design Patterns',
  'TypeScript',
];

const h2Regex = /^##\s+(.+)$/m;

function getFirstH2(content) {
  const match = content.match(h2Regex);
  return match ? match[1].trim() : null;
}

function wrapSection(title, content) {
  const lines = content.split('\n');
  const filtered = [];
  const detailsOpenRegex = /^:::\s+details\b/;
  const detailsCloseRegex = /^:::\s*$/;
  for (const line of lines) {
    if (detailsOpenRegex.test(line) || detailsCloseRegex.test(line)) continue;
    filtered.push(line);
  }
  const body = filtered.join('\n');
  const header = `::: details ${title}\n\n`;
  const footer = '\n:::\n';
  return header + body + footer;
}

function readMarkdownSections(directory) {
  const entries = fs.readdirSync(directory, { withFileTypes: true });
  const sections = [];

  for (const entry of entries) {
    if (entry.isDirectory()) continue; // skip resources dir automatically
    if (!entry.name.endsWith('.md')) continue;

    const filePath = path.join(directory, entry.name);
    const content = fs.readFileSync(filePath, 'utf8');
    const title = getFirstH2(content);
    if (!title) {
      // Skip files without H2 (e.g., frontend.md listing)
      continue;
    }
    sections.push({ title, filePath, content });
  }

  return sections;
}

function sortSections(sections) {
  const orderIndex = (title) => {
    const idx = preferredOrder.indexOf(title);
    return idx === -1 ? Number.MAX_SAFE_INTEGER : idx;
  };
  return sections.sort((a, b) => {
    const ai = orderIndex(a.title);
    const bi = orderIndex(b.title);
    if (ai !== bi) return ai - bi;
    return a.title.localeCompare(b.title);
  });
}

function generateCombinedMarkdown(sections) {
  let out = '# Interview Questions\n\n';
  out +=
    '<!-- This file was generated by joining category files. Each question contains hidden metadata (ID and note type) in HTML comments. -->\n\n';

  for (const s of sections) {
    out += wrapSection(s.title, s.content) + '\n';
  }

  return out.endsWith('\n') ? out : out + '\n';
}

function main() {
  console.log(`Source dir: ${srcDir}`);
  console.log(`Destination: ${destFile}`);

  const sections = readMarkdownSections(srcDir);
  console.log(`Found ${sections.length} section files with H2.`);
  const sorted = sortSections(sections);
  const combined = generateCombinedMarkdown(sorted);
  fs.writeFileSync(destFile, combined, 'utf8');
  console.log('Wrote combined markdown.');
}

main();
